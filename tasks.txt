The task's priority is sorted in ascending order

1. Set up the project:
	1.1 Create each class from the class diagram,
		* PROGRESS: DONE
		* Who : MENEUST Robin
		* Start : 2023/05/15 15:55
		* Estimated end : 2023/05/15 16:30
		* Real end : 2023/05/15 16:30
	1.2 Create scripts for automation (ant)
		* PROGRESS: DONE
		* Who: Yann
		* Start: 2023/05/15 18:30
		* Estimated end: 2023/05/15 18:50
		* Real end: 2023/05/15 18:45

2. Create the data model with an undirected graph:
	2.1 Get the number of columns and rows,
		* PROGRESS: DONE
		* Who: Robin
		* Start: 2023/05/15 18:30
		* Estimated end: 2023/05/15 18:50
		* Real end: 2023/05/15 18:45
	2.2 Create a graph with an adjacency matrix,
		* PROGRESS: DONE
		* Who: Robin
		* Start: 2023/05/15 18:30
		* Estimated end: 2023/05/15 18:50
		* Real end: 
		* NOTE: It's not finished yet because it couldn't get tested before 2023/05/18, and after testing it we noticed that it didn't worked properly (it doesn't find a path even when there is one)
	2.3 Be capable to manipulate the edges (create a new one; destroy one),
		* PROGRESS: DONE
		* Who: Robin
		* Start: 2023/05/15 18:30
		* Estimated end: 2023/05/15 18:50
		* Real end: 2023/05/15 18:45
	/!\ The data model changed
	2.4 Change data model, DESC: Instead of using an adjacency matrix we are now using a adjacency list
		* PROGRESS: DONE
		* Who: Robin
		* Start: 2023/05/16 12:00
		* Estimated end: 2023/05/16 14:30
		* Real end: 2023/05/16 15:30
		* Notes:    Most of the functions needed to be changed, since we don't work with int anymore but with Point.
					hashCode was forgotten in Point.java, that's mostly why it took more time than expected


3. Create the player:
	3.1 Create a player with a username and his number of wins,
		* PROGRESS: DONE
		* Who: Romain
		* Start : 2023/05/15 16h
		* Estimated end : 2023/05/15 17:45
		* Real end : 2023/05/15 18h

	3.2 Create a pawn associated to a player:
		3.2.1 Create the basic class Pawn
			* PROGRESS: DONE
			* Who: Romain
			* Start : 2023/05/15 16h
			* Estimated end : 2023/05/15 17:45
			* Real end : 2023/05/15 18h
		3.2.2 If the pawn place a fence, its available fences must decrease:
			3.2.2.1 Check if there is enough fence available
				* PROGRESS: DONE
				* Who: Thibault
				* Start :  2023/05/15 17:10
				* Estimated end :  2023/05/15 17:40
				* Real end :  2023/05/15 17:45

4. Create fences:
	4.1 Create a fence with a length, a position and an orientation:
		4.1.1 Create the main elements of the class
			* PROGRESS: DONE
			* Who: Robin
			* Start : 2023/05/15 18:05
			* Estimated end : 2023/05/15 18:15
			* Real end : 2023/05/15 18:15
		4.1.2 Check if the starting point of the fence is outside the board
			* PROGRESS: DONE
			* Who: Romain
			* Start : 2023/05/15 18:20
			* Estimated end : 2023/05/15 18:30
			* Real end : 2023/05/16 18:50
		4.1.3 The end of the fence must be consistent with its starting point and its length
			* PROGRESS: DONE
			* Who: Romain
			* Start : 2023/05/16 9:00
			* Estimated end : 2023/05/16 9:30
			* Real end : 2023/05/16 10:00
		4.1.4 Check if the ending point of the fence is outside the board
			* PROGRESS: DONE
			* Who: Romain
			* Start : 2023/05/16 18:30
			* Estimated end : 2023/05/16 19:00
			* Real end : 2023/05/16 19:20

5. Add game sequence:
	5.1 Be able to move or to place a fence,
		* PROGRESS: DONE
		* Who: David
		* Start : 2023/05/15 16:30
		* Estimated end : 2023/05/15 19:00
		* Real end : 2023/05/15 20:30
		* Notes : Issues encountered: scanner.close() closed stdin, so we couldn't use it, even with another Scanner
	5.2 Check if any of these actions is possible,
		5.2.1 Check if the player can place a fence
			5.2.1.1 Check if there is at least one fence remaining
				* PROGRESS: DONE
				* Who: David
				* Start : 2023/05/15 16:30
				* Estimated end : 2023/05/15 19:00
				* Real end : 2023/05/15 20:30
			5.2.1.2 Check if 2 fences are intersecting
				* PROGRESS: DONE
				* Who: Romain
				* Start : 2023/05/17 11:00
				* Estimated end : 2023/05/17 14:00
				* Real end : 2023/05/17 15:25
			5.2.1.3 Find a path between to points,
				* PROGRESS: DONE
				* Who: Robin
				* Start: 2023/05/15 18:30
				* Estimated end: 2023/05/15 18:50
				* Real end: 2023/05/15 18:45
			5.2.1.4 Add the new fence to the list and to the grid
				* PROGRESS: DONE
				* Who: Robin
				* Start: 2023/05/15 20:30
				* Estimated end: 2023/05/15 21:00
				* Real end: 2023/05/15 21:30
		5.2.2 Get a list of all the available cells the player can to move to (can the player jump?, is there a fence? ...)
			5.2.2.1 The player can jump above another one
				* PROGRESS: DONE
				* Who: Thibault
				* Start : 2023/05/15 18:45
				* Estimated end : 2023/05/15 19:30
				* Real end : 2023/05/15 20:00
				* Notes: function creation to avoid code repetition took me longer than expected.
				* Update: 2023/05/17, Bug fix after changement in  the areConnected function
			5.2.2.2 If the player can jump above another one but there is a fence behind, he can go diagonally
				* PROGRESS: IN_PROGRESS
				* Who: Thibault
				* Start : 2023/05/16 18:30
				* Estimated end : 2023/05/16 18:45 
				* Real end : 2023/05/16 19:45
		5.2.3 Check if the move give by the player is in that list of available cells
			* PROGRESS: DONE
			* Who: Thibault
			* Start : 2023/05/16 15:00
			* Estimated end : 2023/05/16 15:10
			* Real end : 2023/05/16 15:05
	5.3 Check if anybody wins,
		* PROGRESS: DONE
		* Who: Romain
		* Start : 2023/05/16 16:00
		* Estimated end : 2023/05/16 17:30
		* Real end : 2023/05/16 18:00
	5.4 Ask the player how many players there are and check the number (it must be equals to 2 or 4)
		* PROGRESS: DONE
		* Who: Romain
		* Start : 2023/05/16 16:45
		* Estimated end : 2023/05/16 16:50
		* Real end : 2023/05/16 16:49

6. Create a console interface to be able to test the game:
	6.1 Represent the cells of the grid in the console
		* PROGRESS: DONE
		* Who: Robin
		* Start : 2023/05/15 17:30
		* Estimated end : 2023/05/15 17:45
		* Real end : 2023/05/15 17:55
	6.2 Be able to see the player on the grid,
		* PROGRESS: DONE
		* Who: Robin
		* Start : 2023/05/15 17:55
		* Estimated end : 2023/05/15 18:05
		* Real end : 2023/05/15 18:05
	* Notes: The code had to be changed on 2023/05/16, since the areConnected function doesn't take the same type of parameters. It was also simplified.

7. Create a save:
	7.1 Let the player choose the location and the name of the save in the console (check if it already exists),
		* PROGRESS: DONE
		* Who: Yann
		* Start : 2023/05/16 18:35
		* Estimated end : 2023/05/16 18:45 
		* Real end : 2023/05/16 18:40
	7.2 Encode the game in a file to save it,
		* PROGRESS: DONE
		* Who: Yann
		* Start : 2023/05/16 20:00
		* Estimated end : 2023/05/16 20:30
		* Real end : 2023/05/18 23:00

8. Load a save:
	8.1 Let the player choose the file containing the save to be loaded in the console (check if the file exists)
		* PROGRESS: IN PROGRESS
		* Who: Yann
		* Start : 2023/05/19 10:00
		* Estimated end : 2023/05/19 10:10
		* Real end : 
	8.2 Decode the file containing the save and load it, check if the format is valid,
		* PROGRESS: IN PROGRESS
		* Who: Yann
		* Start : 2023/05/19 10:15
		* Estimated end : 2023/05/19 11:30
		* Real end :

9. Create a user interface using JavaFX:
	9.0 Set up Maven to build the executable JAR that includes JavaFX
		* PROGRESS: DONE
		* Who: Robin
		* Start : 2023/05/16 23:00
		* Estimated end : 2023/05/16 23:15
		* Real end : 2023/05/17 23:59
		* Note : The delay is because we tried to use VSCode and Ant instead of Eclipse, so we had to search for a way to link the libraries of JavaFX to our project
				And it got delayed even more because we didn't know how to create a standalone JAR with Ant, and so we used Maven
	9.1 Create a window for the application (it might not need to be resizable)
		* PROGRESS: TO_DO
		* Who: David
		* Start : 2023/05/16 19:40
		* Estimated end : 2023/05/16 19:50
		* Real end :
	9.2 Create a grid and add it to the window
		9.2.1 Create images (or take existing forms from JavaFX ?) representing empty cells or players
			* PROGRESS: TO_DO
			* Who: David
			* Start : 2023/05/16 19:55
			* Estimated end : 2023/05/16 20:10
			* Real end :
		9.2.2 Create a GridPane (?) and add images
			* PROGRESS: TO_DO
			* Who: David
			* Start : 2023/05/16 20:10
			* Estimated end : 2023/05/16 20:30
			* Real end :
	9.3 Add fences to the window (thick black borders) without breaking the alignement (the size of the grid must not change)
		* PROGRESS: DONE
		* Who: Robin
		* Start : 2023/05/18 16:00
		* Estimated end : 2023/05/18 18:00
		* Real end : 2023/05/18 17:40
		* NOTE: the main issue here was the coordinate system (x,y) because I mixed it with the usual (i,j) representation of array in code (row,column)

10. Add events and use CAP (Observers...) to link the "presentation" to the "abstraction" using "controllers"
	10.1 Add buttons (and events) used by the player to choose his next move (place fence or move)
		10.1.1 Create the buttons and add it to the window. The "Place fence" button must be disabled or hidden if the player can't place a fence.
			We can also just create one button "Place Fence" that becomes "Move" when pressed (it's probably better to do so)
			* PROGRESS: DONE
			* Who: Thibault
			* Start : 2023/05/18 12:00
			* Estimated end : 2023/05/18 13:30
			* Real end : 2023/05/18 15h05
			* Notes : This step took longer than expected because we had to link the interface to the progress of the game in the terminal
		10.1.2 Add events and controllers to switch player mode to "PLACE FENCE" or "MOVE" when a button is clicked,
			* PROGRESS: Done
			* Who: Thibault
			* Start : 2023/05/18 16h30
			* Estimated end : 2023/05/18 18h00
			* Real end : 2023/05/18 20h30
		
	10.2 Player movements ("MOVE" mode)
		10.1.1 Show the possible moves by changing the color of the corresponding cells (e.g greyed)
			* PROGRESS: Done
			* Who: David
			* Start : 2023/05/18 15:00
			* Estimated end : 2023/05/17 15:30
			* Real end :2023/05/17 16:00
		10.1.2 Add an event that changes the content of the hovered cell (the color/image will be different whether it's a cell where the player can move or not)
			* PROGRESS: Done
			* Who: David
			* Start : 2023/05/18 16:00
			* Estimated end : 2023/05/18 16:10
			* Real end :2023/05/18 16:20
		10.1.3 Add an event to move the player when a cell is clicked (where he can go) (remove the previous pawn position on the grid)
			* PROGRESS: Done
			* Who: David
			* Start : 2023/05/18 16:30
			* Estimated end : 2023/05/18 16:50
			* Real end : 2023/05/18 17:00
	10.3 Place fences ("PLACE FENCE" mode)
		10.1.1 Add an event that changes the borders of the hovered cell (the color/image will be different whether it's a border where the player can place a fence or not)
			* PROGRESS: DONE
			* Who: Robin
			* Start : 2023/05/18 20:30
			* Estimated end : 2023/05/18 21:00
			* Real end : 2023/05/18 23:20
		10.1.2 Add an event to place the fence when a border (where a fence can be added) is clicked
			* PROGRESS: TO_DO
			* Who: Robin
			* Start : 2023/05/19 11:00
			* Estimated end : 2023/05/19 14:00
			* Real end :
	10.4 Add a fence counter
		* PROGRESS: TO_DO
		* Who: PERSON_4
		* Start : 2023/05/17 12:00
		* Estimated end : 2023/05/17 12:10
		* Real end :
	10.5 Add button for the save system
		10.3.1 Create a load button that opens a FileChoser
			* PROGRESS: TO_DO
			* Who: PERSON_4
			* Start : 2023/05/17 12:10
			* Estimated end : 2023/05/17 12:25
			* Real end :
		10.3.2 Create a save button that opens a FileChoser
			* PROGRESS: TO_DO
			* Who: PERSON_4
			* Start : 12:25
			* Estimated end : 12:40
			* Real end :

11. Add a main menu and its buttons
	11.1 New game button and its event (launch a new game)
		* PROGRESS: TO_DO
		* Who: PERSON_5
		* Start : 2023/05/17 12:00
		* Estimated end : 2023/05/17 12:45
		* Real end :
	11.2 Load Game button and its event (load and launch a game)
		* PROGRESS: TO_DO
		* Who: PERSON_5
		* Start : 2023/05/17 12:45
		* Estimated end :  2023/05/17 13:30
		* Real end :


The following tasks aren't mandatory:

12. Optional functionalities
	12.1 Options button in main menu and options menu
		12.1.1 Create the option button and an event that change the scene to the options menu
			* PROGRESS: TO_DO
			* Who: 
			* Start : 
			* Estimated end : 
			* Real end :
		12.1.2 Add options
			12.1.2.1 Change controls
				* PROGRESS: TO_DO
				* Who: 
				* Start : 
				* Estimated end : 
				* Real end :
			12.1.2.2 Change screen resolution
				* PROGRESS: TO_DO
				* Who: 
				* Start : 
				* Estimated end : 
				* Real end :
			12.1.2.3 Change size of fences
				* PROGRESS: TO_DO
				* Who: 
				* Start : 
				* Estimated end : 
				* Real end :
			12.1.2.4 Change board size
				* PROGRESS: TO_DO
				* Who: 
				* Start : 
				* Estimated end : 
				* Real end :
			12.1.2.5 Change pawn color or image
				* PROGRESS: TO_DO
				* Who: 
				* Start : 
				* Estimated end : 
				* Real end :
	12.2 Add a singleplayer mode
		* PROGRESS: TO_DO
		* Who: 
		* Start : 
		* Estimated end : 
		* Real end :
